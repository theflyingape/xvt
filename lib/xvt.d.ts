/// <reference types="node" />
interface Field {
    cb: Function;
    row?: number;
    col?: number;
    prompt?: string;
    cancel?: string;
    enter?: string;
    eraser?: string;
    min?: number;
    max?: number;
    match?: RegExp;
    echo?: boolean;
    enq?: boolean;
    eol?: boolean;
    lines?: number;
    pause?: boolean;
    delay?: number;
    timeout?: number;
    warn?: boolean;
}
interface iField {
    [key: string]: Field;
}
declare type emulator = 'dumb' | 'VT' | 'PC' | 'PI' | 'XT';
export declare class xvt {
    readonly reset = 0;
    readonly bright = 1;
    readonly faint = 2;
    readonly uline = 4;
    readonly blink = 5;
    readonly reverse = 7;
    readonly off = 20;
    readonly nobright = 21;
    readonly normal = 22;
    readonly nouline = 24;
    readonly noblink = 25;
    readonly noreverse = 27;
    readonly black = 30;
    readonly red = 31;
    readonly green = 32;
    readonly yellow = 33;
    readonly blue = 34;
    readonly magenta = 35;
    readonly cyan = 36;
    readonly white = 37;
    readonly Black = 40;
    readonly Red = 41;
    readonly Green = 42;
    readonly Yellow = 43;
    readonly Blue = 44;
    readonly Magenta = 45;
    readonly Cyan = 46;
    readonly White = 47;
    readonly lblack = 90;
    readonly lred = 91;
    readonly lgreen = 92;
    readonly lyellow = 93;
    readonly lblue = 94;
    readonly lmagenta = 95;
    readonly lcyan = 96;
    readonly lwhite = 97;
    readonly lBlack = 100;
    readonly lRed = 101;
    readonly lGreen = 102;
    readonly lYellow = 103;
    readonly lBlue = 104;
    readonly lMagenta = 105;
    readonly lCyan = 106;
    readonly lWhite = 107;
    readonly cll = 254;
    readonly clear = 255;
    constructor(e?: emulator, init?: boolean, log?: boolean, form?: iField);
    private _emulation;
    private _encoding;
    get emulation(): emulator;
    set emulation(e: emulator);
    get encoding(): BufferEncoding;
    get LGradient(): string;
    get RGradient(): string;
    get Draw(): string[];
    get Empty(): string;
    carrier: boolean;
    modem: boolean;
    ondrop: Function;
    reason: string;
    defaultColor: number;
    defaultPrompt: number;
    defaultTimeout: number;
    defaultWarn: boolean;
    entry: string;
    idleTimeout: number;
    sessionAllowed: number;
    sessionStart: Date;
    terminator: string;
    typeahead: string;
    col: number;
    color: number;
    bold: boolean;
    dim: boolean;
    ul: boolean;
    flash: boolean;
    row: number;
    rvs: boolean;
    private _col;
    private _color;
    private _bold;
    private _dim;
    private _ul;
    private _flash;
    private _row;
    private _rvs;
    private _SGR;
    private _text;
    private SGR;
    private text;
    attr(...params: any[]): string;
    beep(): void;
    drain(): void;
    hangup(): void;
    out(...params: any[]): void;
    outln(...params: any[]): void;
    pause(nextField: string, timeout?: number, cb?: Function): void;
    plot(row?: number, col?: number): void;
    restore(): void;
    rubout(n?: number, erase?: boolean): void;
    save(): void;
    sleep(ms: number): void;
    private _fields;
    private _focus;
    get form(): iField;
    set form(name: iField);
    get focus(): string | number;
    set focus(name: string | number);
    abort: boolean;
    cancel: string;
    delay: number;
    echo: boolean;
    enq: boolean;
    enter: string;
    entryMin: number;
    entryMax: number;
    eol: boolean;
    eraser: string;
    input: string;
    line: number;
    lines: number;
    multi: string[];
    warn: boolean;
    private _read;
    private _pad;
    private _waiting;
    read(): Promise<void>;
    refocus(prompt?: string): void;
    stdio(log?: boolean): void;
}
export default xvt;
